package com.imzoee.caikid.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.imzoee.caikid.dao.Order;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ORDER.
*/
public class OrderDao extends AbstractDao<Order, Void> {

    public static final String TABLENAME = "ORDER";

    /**
     * Properties of entity Order.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property OrderId = new Property(0, Integer.class, "orderId", false, "ORDER_ID");
        public final static Property OrderNumber = new Property(1, String.class, "orderNumber", false, "ORDER_NUMBER");
        public final static Property Phone = new Property(2, String.class, "phone", false, "PHONE");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Price = new Property(4, Double.class, "price", false, "PRICE");
        public final static Property RecieveTime = new Property(5, String.class, "recieveTime", false, "RECIEVE_TIME");
        public final static Property OrderTime = new Property(6, String.class, "orderTime", false, "ORDER_TIME");
        public final static Property OrderAddress = new Property(7, String.class, "orderAddress", false, "ORDER_ADDRESS");
        public final static Property OrderFlag = new Property(8, String.class, "orderFlag", false, "ORDER_FLAG");
    };


    public OrderDao(DaoConfig config) {
        super(config);
    }
    
    public OrderDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ORDER' (" + //
                "'ORDER_ID' INTEGER," + // 0: orderId
                "'ORDER_NUMBER' TEXT," + // 1: orderNumber
                "'PHONE' TEXT," + // 2: phone
                "'NAME' TEXT," + // 3: name
                "'PRICE' REAL," + // 4: price
                "'RECIEVE_TIME' TEXT," + // 5: recieveTime
                "'ORDER_TIME' TEXT," + // 6: orderTime
                "'ORDER_ADDRESS' TEXT," + // 7: orderAddress
                "'ORDER_FLAG' TEXT);"); // 8: orderFlag
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ORDER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Order entity) {
        stmt.clearBindings();
 
        Integer orderId = entity.getOrderId();
        if (orderId != null) {
            stmt.bindLong(1, orderId);
        }
 
        String orderNumber = entity.getOrderNumber();
        if (orderNumber != null) {
            stmt.bindString(2, orderNumber);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(3, phone);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        Double price = entity.getPrice();
        if (price != null) {
            stmt.bindDouble(5, price);
        }
 
        String recieveTime = entity.getRecieveTime();
        if (recieveTime != null) {
            stmt.bindString(6, recieveTime);
        }
 
        String orderTime = entity.getOrderTime();
        if (orderTime != null) {
            stmt.bindString(7, orderTime);
        }
 
        String orderAddress = entity.getOrderAddress();
        if (orderAddress != null) {
            stmt.bindString(8, orderAddress);
        }
 
        String orderFlag = entity.getOrderFlag();
        if (orderFlag != null) {
            stmt.bindString(9, orderFlag);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public Order readEntity(Cursor cursor, int offset) {
        Order entity = new Order( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // orderId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // orderNumber
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // phone
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // price
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // recieveTime
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // orderTime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // orderAddress
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // orderFlag
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Order entity, int offset) {
        entity.setOrderId(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setOrderNumber(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPhone(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPrice(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
        entity.setRecieveTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setOrderTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setOrderAddress(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setOrderFlag(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(Order entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(Order entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
